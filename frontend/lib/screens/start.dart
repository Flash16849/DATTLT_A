// lib/screens/start.dart
import 'dart:async';
import 'package:flutter/material.dart';
import '../models/test_question.dart';
import 'package:flutter_svg/flutter_svg.dart';
import './finish.dart';
import '../models/test_answer.dart';

class StartQuizScreen extends StatefulWidget {
  final String username;
  final List<TestQuestion> questions;

  const StartQuizScreen({
    super.key,
    required this.questions,
    required this.username,
  });

  @override
  State<StartQuizScreen> createState() => _StartQuizScreenState();
}

class _StartQuizScreenState extends State<StartQuizScreen> {
  int currentIndex = 0;
  int remainingTime = 0;
  late Timer timer;
  int score = 0;

  late List<Answer> answers;

  @override
  void initState() {
    super.initState();

    // L√Ω do khai b√°o List answers nh∆∞ n√†y l√† ƒë·ªÉ cho tr∆∞·ªùng h·ª£p
    // user b·ªè qua/kh√¥ng ch·ªçn answer cho c√¢u h·ªèi n√†o ƒë√≥
    // T·ª´ng answer trong list s·∫Ω t∆∞∆°ng ·ª©ng v·ªõi List questions
    answers = List.generate(
      widget.questions.length,
      (index) => Answer(
        questionId: widget.questions[index].questionId,
        selectedOptionIndex: null,
      ),
    );

    remainingTime = widget.questions[0].maxTime * 10; // Time t·ªïng c·ªßa b√†i test
    startTimer();
  }

  // H√†m ƒë·∫øm th·ªùi gian t·ªïng b√†i test
  // N·∫øu h·∫øt gi·ªù m√† user ch∆∞a ch·ªß ƒë·ªông finish b√†i
  // th√¨ s·∫Ω d·ª´ng b√†i test v√† g·ªçi calculateTest
  void startTimer() {
    timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (remainingTime > 0) {
        setState(() => remainingTime--);
      } else {
        calculateTest();
      }
    });
  }

  // H√†m ƒë·ªÉ chuy·ªÉn c√¢u h·ªèi ti·∫øp theo
  // N·∫øu l√† c√¢u cu·ªëi th√¨ s·∫Ω k·∫øt th√∫c b√†i test v√† g·ªçi calculateTest
  void goToNextQuestion() {
    if (currentIndex < widget.questions.length - 1) {
      setState(() {
        currentIndex++;
      });
    } else {
      timer.cancel();
      calculateTest();
    }
  }

  // H√†m ƒë·ªÉ quay l·∫°i c√°c c√¢u h·ªèi tr∆∞·ªõc
  void goToBack() {
    if (currentIndex > 0) {
      setState(() {
        currentIndex--;
      });
    }
  }

  // H√†m n√†y ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh b√†i test
  // ƒê∆∞·ª£c d√πng ƒë·ªÉ t√≠nh ƒëi·ªÉm b√†i test v√† chuy·ªÉn sang trang Finish
  void calculateTest() {
    for (int i = 0; i < widget.questions.length; i++) {
      if (answers[i].selectedOptionIndex ==
          widget.questions[i].correctAnswerIndex) {
        score++;
      }
    }

    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder:
            (context) => FinishScreen(
              userName: widget.username,
              score: score,
              total: 10,
              answers: answers,
              questions: widget.questions,
            ),
      ),
    );
  }

  //H√†m ƒë·ªÉ l∆∞u answer c·ªßa ng∆∞·ªùi d√πng cho m·ªói c√¢u h·ªèi
  void selectAnswer(int selectedIndex) {
    //selectedIndex l√† option ng∆∞·ªùi d√πng ch·ªçn cho c√¢u h·ªèi n√†o ƒë√≥
    setState(() {
      answers[currentIndex].selectedOptionIndex = selectedIndex;
    });
  }

  void openQuestionMenu(BuildContext context) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.grey.shade200,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Padding(
          padding: const EdgeInsets.all(16),
          child: GridView.builder(
            shrinkWrap: true,
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 5, // 5 √¥ m·ªói h√†ng
              crossAxisSpacing: 12,
              mainAxisSpacing: 12,
              childAspectRatio: 1.5, // ch·ªânh cho √¥ g·ªçn
            ),
            itemCount: widget.questions.length,
            itemBuilder: (context, index) {
              bool haveDone = answers[index].selectedOptionIndex != null;

              return ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: haveDone ? Color(0xFF493D79) : Colors.deepPurpleAccent.shade700,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                  padding: const EdgeInsets.all(0),
                ),
                onPressed: () {
                  setState(() {
                    currentIndex = index; // chuy·ªÉn t·ªõi c√¢u ch·ªçn
                  });
                },
                child: Text(
                  (index + 1).toString(),
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Color(0xFFFFFAFA),
                  ),
                ),
              );
            },
          ),
        );
      },
    );
  }

  @override
  void dispose() {
    timer.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final question = widget.questions[currentIndex];
    double progress = (currentIndex + 1) / widget.questions.length;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        toolbarHeight: 15,
        leading: Center( // üëà B·ªçc IconButton b·∫±ng Center
          child: IconButton(
            padding: EdgeInsets.zero,
            icon: const Icon(Icons.menu, size: 20),
            // constraints: const BoxConstraints(),
            onPressed: () => openQuestionMenu(context),
          ),
        ),
      ),

      body: SingleChildScrollView(
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height,
          decoration: BoxDecoration(color: Color(0xFFFFFAFA)),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'Quiz Time',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF8E3DFF),
                    ),
                  ),
                  Row(
                    children: [
                      const Icon(Icons.timer, color: Color(0xFF8E3DFF)),
                      const SizedBox(width: 4),
                      Text(
                        '${remainingTime ~/ 60}:${(remainingTime % 60).toString().padLeft(2, '0')}',
                        style: const TextStyle(color: Color(0xFF8E3DFF)),
                      ),
                    ],
                  ),
                ],
              ),
              
              const SizedBox(height: 16),
              LinearProgressIndicator(
                value: progress,
                backgroundColor: Colors.grey[300],
                color: Colors.deepPurple,
              ),
        
              const Spacer(),
        
              // ƒêo·∫°n n√†y hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i
              // N·∫øu c√¢u h·ªèi c√≥ ·∫£nh th√¨ s·∫Ω hi·ªÉn th·ªã ·∫£nh l√™n tr∆∞·ªõc c√¢u h·ªèi
              if (question.questionImg != null &&
                  question.questionImg.isNotEmpty) ...[
                Image.network(
                  question.questionImg, // ƒê∆∞·ªùng d·∫´n ·∫£nh t·ª´ backend
                  height: 140, // Chi·ªÅu cao c·ªßa ·∫£nh
                  width: double.infinity, // Chi·ªÅu r·ªông c·ªßa ·∫£nh
                  fit: BoxFit.contain, // C√°ch hi·ªÉn th·ªã ·∫£nh
                  errorBuilder: (context, error, stackTrace) {
                    return const Text(
                      'Error loading image!!!',
                    ); // N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh th√¨ s·∫Ω hi·ªÉn th·ªã text n√†y
                  },
                ),
                const SizedBox(height: 16),
              ],
        
              Text(
                question.questionText,
                style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
              ),
              const SizedBox(height: 12),
        
              // ƒêo·∫°n n√†y b·∫Øt ƒë·∫ßu li·ªát k√™ c√°c option c·ªßa m·ªôt c√¢u h·ªèi v·ªõi index ƒëi t·ª´ 0-3
              ...List.generate(question.options.length, (index) {
                //Bi·∫øn n√†y ƒë·ªÉ t√¥ ƒë·∫≠m option m√† ng∆∞·ªùi d√πng ch·ªçn
                final isSelected =
                    answers[currentIndex].selectedOptionIndex == index;
        
                return Padding(
                  padding: const EdgeInsets.only(bottom: 3),
                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      // N·∫øu isSelected l√† true th√¨ option s·∫Ω c√≥ background m√†u ƒë·∫≠m h∆°n c√°c option c√≤n l·∫°i
                      backgroundColor:
                          isSelected ? Color(0xFF493D79) : Color(0xFF7F5CFF),
        
                      foregroundColor: Color(0xFFFFFAFA),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(32),
                      ),
                    ),
                    onPressed:
                        () => selectAnswer(
                          index,
                        ), // G·ªçi h√†m ƒë·ªÉ l∆∞u answer c·ªßa ng∆∞·ªùi d√πng theo th·ª© t·ª± t∆∞∆°ng ·ª©ng v·ªõi question
        
                    child: Align(
                      alignment: Alignment.centerLeft,
                      child: Padding(
                        padding: const EdgeInsets.symmetric(
                          vertical: 6.0,
                          horizontal: 6,
                        ),
                        child: Text(
                          '${String.fromCharCode(97 + index)}. ${question.options[index]}',
                          style: const TextStyle(fontSize: 14),
                        ),
                      ),
                    ),
                  ),
                );
              }),
              Row(
                mainAxisSize: MainAxisSize.max,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Align(
                    alignment: Alignment.bottomLeft,
                    child: Text(
                      '${(currentIndex + 1).toString()}/${widget.questions.length}', // N√†y l√† ƒë·ªÉ hi·ªÉn th·ªã s·ªë th·ª© t·ª± c√¢u h·ªèi ƒëang l√†m
                      style: const TextStyle(
                        // V√≠ d·ª• ƒëang l√†m c√¢u 2 trong t·ªïng s·ªë 10 c√¢u -> 2/10
                        fontSize: 13,
                        fontWeight: FontWeight.w500,
                        color: Color(0xFF121212),
                      ),
                    ),
                  ),
        
                  Align(
                    alignment: Alignment.bottomRight,
                    child: Row(
                      children: [
                        IconButton(
                          icon: const Icon(
                            Icons.arrow_back,
                            color: Colors.deepPurple,
                          ),
                          onPressed:
                              goToBack, //M≈©i t√™n ƒë·ªÉ lui l·∫°i m·∫•y c√¢u h·ªèi tr∆∞·ªõc
                        ),
                        const SizedBox(width: 10),
                        IconButton(
                          icon: const Icon(
                            Icons.arrow_forward,
                            color: Colors.deepPurple,
                          ),
                          onPressed:
                              goToNextQuestion, //M≈©i t√™n ƒë·ªÉ ƒëi t·ªõi c√¢u h·ªèi ti·∫øp
                        ),
                      ],
                    ),
                  ),
                ],
              ),
        
              // const Spacer(),
              Align(
                alignment: Alignment.bottomRight,
                child: SvgPicture.asset(
                  'lib/assets/images/monsterQuestion.svg',
                  height: 50,
                ),
              ),
              const SizedBox(height: 20,)
            ],
          ),
        ),
      ),
    );
  }
}
